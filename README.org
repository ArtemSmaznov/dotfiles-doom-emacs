:PROPERTIES:
:ID:       f8753b37-4a40-43d8-af24-1542cdfea063
:END:
#+title:       Doom Emacs
#+author:      Artem Smaznov
#+description: Emacs is to Vim as Vim is to Notepad
#+startup:     overview

* Table of Contents :toc:
- [[#introduction-to-the-config][Introduction to the Config]]
- [[#global-options][Global Options]]
- [[#fonts][Fonts]]
- [[#core][Core]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#dired][Dired]]
  - [[#evil-mode][Evil Mode]]
  - [[#which-key][Which Key]]
  - [[#xdg][XDG]]
  - [[#smart-parens][Smart Parens]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-journal][Org Journal]]
  - [[#roam][Roam]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-auto-tangle][Org Auto Tangle]]
  - [[#ox][Ox]]
- [[#office-tools][Office Tools]]
  - [[#calendar][Calendar]]
  - [[#email][Email]]
  - [[#ledger][Ledger]]
  - [[#presentations][Presentations]]
- [[#development-tools][Development Tools]]
  - [[#git][Git]]
  - [[#ansible][Ansible]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
  - [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#rotate-text][Rotate Text]]
  - [[#indent-guides][Indent Guides]]
  - [[#rainbow-mode][Rainbow Mode]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP Mode]]
  - [[#conf][Conf]]
  - [[#crontab][Crontab]]
  - [[#cucumber][Cucumber]]
  - [[#groovy][Groovy]]
  - [[#javascript][JavaScript]]
  - [[#jinja][Jinja]]
  - [[#json][Json]]
  - [[#logs][Logs]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#vim][Vim]]
  - [[#yaml][Yaml]]
- [[#ai][AI]]
  - [[#kill-copilot][KILL Copilot]]
- [[#rss][RSS]]
  - [[#elfeed][Elfeed]]
  - [[#elfeed-org][Elfeed Org]]
  - [[#elfeed-protocol][Elfeed Protocol]]
- [[#spell-checking][Spell Checking]]
- [[#global-keybindings][Global Keybindings]]
- [[#local-overwrite][Local Overwrite]]
- [[#additional-notes][Additional Notes]]

* Introduction to the Config
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Personal Info
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "personal.el" doom-private-dir))
  (load! (expand-file-name "personal.el" doom-private-dir))
  )
#+end_src

* Global Options
#+begin_src emacs-lisp
(setq
 doom-theme 'doom-one
 display-line-numbers-type 'relative
 scroll-margin 2
 window-divider-default-right-width 6 ;; set width of window dividers
 split-height-threshold nil ;; HACK diable to allow peep-dired to work (prefered 0)
 confirm-kill-emacs nil)

(xterm-mouse-mode 1)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.
+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src emacs-lisp
(setq
 doom-font                (font-spec :family "Hack Nerd Font" :size 16)
 doom-variable-pitch-font (font-spec :family "Hack Nerd Font")
 global-prettify-symbols-mode t)

(if (featurep :system 'macos) (setq
 doom-symbol-font         (font-spec :family "STIX Two Math")))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(use-package! doom-themes
  :config
  (setq
   doom-themes-enable-bold t
   doom-themes-enable-italic t))

(use-package! emojify
  :defer t
  :hook (after-init . global-emojify-mode))

(doom-big-font-mode)
#+end_src

* Core
** Dashboard
*** Doom Dashboard
#+begin_src emacs-lisp
(setq
 fancy-splash-image (expand-file-name "doom-logo.png" doom-user-dir)
 +doom-dashboard-menu-sections '(
                                 ("Reload last session" :icon
                                  (nerd-icons-octicon "nf-oct-history" :face 'doom-dashboard-menu-title)
                                  :when
                                  (cond
                                   ((modulep! :ui workspaces)
                                    (file-exists-p
                                     (expand-file-name persp-auto-save-fname persp-save-dir)))
                                   ((require 'desktop nil t)
                                    (file-exists-p
                                     (desktop-full-file-name))))
                                  :action doom/quickload-session)
                                 ("Recently opened files" :icon
                                  (nerd-icons-faicon "nf-fa-file_text" :face 'doom-dashboard-menu-title)
                                  :action recentf-open-files)
                                 ("Open org-agenda" :icon
                                  (nerd-icons-octicon "nf-oct-calendar" :face 'doom-dashboard-menu-title)
                                  :when
                                  (fboundp 'org-agenda)
                                  :action org-agenda)
                                 ("Open project" :icon
                                  (nerd-icons-octicon "nf-oct-briefcase" :face 'doom-dashboard-menu-title)
                                  :action projectile-switch-project)
                                 ("Jump to bookmark" :icon
                                  (nerd-icons-octicon "nf-oct-bookmark" :face 'doom-dashboard-menu-title)
                                  :action bookmark-jump)
                                 ("Open private configuration" :icon
                                  (nerd-icons-octicon "nf-oct-tools" :face 'doom-dashboard-menu-title)
                                  :when
                                  (file-directory-p doom-user-dir)
                                  :action doom/open-private-config)
                                 ("Open documentation" :icon
                                  (nerd-icons-octicon "nf-oct-book" :face 'doom-dashboard-menu-title)
                                  :action doom/help)))
#+end_src

*** Emacs Dashboard
# Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

# #+begin_src emacs-lisp
# (use-package! dashboard
#   :init      ;; tweak dashboard config before loading it
#   (setq
#    dashboard-set-heading-icons t
#    dashboard-set-file-icons t
#    dashboard-page-separator "\n \n"
#    dashboard-banner-logo-title "There is no place like home!"
#    ;; dashboard-startup-banner 'logo ;; use standard emacs logo as banner
#    ;; dashboard-startup-banner "~/.config/doom/doom-emacs-logo.txt"  ;; use doom dashboard ASCII banner
#    dashboard-startup-banner "~/.config/doom/doom-logo.png"  ;; use custom image as banner
#    dashboard-center-content t ;; set to 't' for centered content
#    dashboard-items '(
#                      (recents . 10)
#                      (agenda . 5 )
#                      (bookmarks . 5)
#                      (projects . 5)
#                      (registers . 5)
#                      )
#    )

#   :config
#   (dashboard-setup-startup-hook)
#   (dashboard-modify-heading-icons '(
#                                     (recents . "file-text")
#                                     (bookmarks . "book")
#                                     )))
# #+end_src

# This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

# #+begin_src emacs-lisp
# (setq
#  doom-fallback-buffer "*dashboard*"
#  doom-fallback-buffer-name "*dashboard*"
#  )
# #+end_src
** Modeline
#+begin_src emacs-lisp
(use-package! doom-modeline
  :config
  (remove-hook 'doom-modeline-mode-hook #'size-indication-mode) ; filesize in modeline
  (setq
   doom-modeline-height 32
   doom-modeline-column-zero-based nil
   doom-modeline-indent-info t
   doom-modeline-major-mode-icon t))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package! dired
  :commands (dired dired-jump)
  :config
  (map! :map dired-mode-map
        :desc "Create new file" :n "." #'dired-create-empty-file))
#+end_src

dirvish
#+begin_src emacs-lisp
(use-package! dirvish
  :after dired
  :hook (dirvish-mode . dired-hide-dotfiles-mode)
  :custom
  (dirvish-quick-access-entries
   '(("a" "/ssh:amadeus.arts.lan:/srv/" "amadeus")
     ("b" "~/.local/bin/"               ".local/bin")
     ("c" "~/.config/"                  ".config")
     ("d" "~/documents/"                "documents")
     ("D" "~/downloads/"                "downloads")
     ("E" "/etc/"                       "/etc")
     ("f" "~/documents/finance"         "documents/finance")
     ("g" "~/games"                     "games")
     ("h" "~/"                          "home")
     ("i" "~/music/import"              "music/import")
     ("m" "~/music/"                    "music")
     ("M" "/run/mount"                  "/run/mount")
     ("n" "~/documents/notes"           "documents/notes")
     ("p" "~/pictures"                  "~/pictures")
     ("P" "~/photos"                    "~/photos")
     ("r" "~/videos/recordings"         "~/videos/recordings")
     ("s" "~/pictures/screenshots"      "~/pictures/screenshots")
     ("T" "/tmp"                        "/tmp")
     ("v" "~/videos"                    "~/videos")
     ("w" "~/pictures/wallpapers"       "~/pictures/wallpapers")
     ("z" "~/zmedia"                    "~/zmedia")))

  :config
  (map! :map dirvish-mode-map
        :desc "marks" :n "'" #'dirvish-quick-access

        :n "z" nil
        :prefix "z"
        :n "z" #'dirvish-history-jump))
#+end_src

toggle hidden files in dired
#+begin_src emacs-lisp
(use-package! dired-hide-dotfiles
  :after dired
  :hook (dired-mode . dired-hide-dotfiles-mode)

  :config
  (map! :map dired-mode-map
        :prefix "z"
        :desc "Hide dot files"   :n "o" (lambda () (interactive) (dired-hide-dotfiles-mode 0))
        :desc "Show dot files"   :n "m" (lambda () (interactive) (dired-hide-dotfiles-mode 1))
        :desc "Toggle dot files" :n "a" #'dired-hide-dotfiles-mode
        :desc "Toggle dot files" :n "." #'dired-hide-dotfiles-mode))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
(use-package! evil
  :config
  (map! :map evil-insert-state-map
        :i "<C-h>" #'evil-delete-backward-char-and-join)

  (setq evil-cross-lines t))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package! which-key
  :init
  (setq which-key-idle-delay 0.4))
#+end_src

** XDG
#+begin_src emacs-lisp
(use-package! xdg)
#+end_src

** Smart Parens
#+begin_src emacs-lisp
(use-package! smartparens-mode
  :ensure smartparens
  ;; :defer t
  :hook (js-mode . smartparens-strict-mode)

  :config
  (require 'smartparens-config))
#+end_src

* Org Mode
** Org
#+begin_src emacs-lisp
(use-package! org
  :commands org-capture-goto-target
  :init
  (setq
   org-directory (if (featurep :system 'macos) "~/Documents/notes/"
                   (expand-file-name "notes/" (xdg-user-dir "DOCUMENTS")))
   org-agenda-files          (list org-directory)
   org-default-notes-file    (expand-file-name "notes.org" org-directory)
   +org-capture-journal-file (expand-file-name "writing/journal.org" org-directory)
   org-archive-location      (expand-file-name "archive.org::datetree/" org-directory) ;; can also use "archive.org::datetrea/* %s"
   org-id-locations-file     (expand-file-name ".orgids" org-directory))

  :hook (org-mode . (lambda ()
                      (make-local-variable 'display-line-numbers)
                      (visual-line-mode -1)
                      (setq display-line-numbers 'visual)))

  :config
  (map! :mode org-mode
        :localleader
        :n "B" #'org-babel-tangle)

  (map! :map org-mode-map
        :desc "Move line(s) up"        :nv "<M-up>"    #'drag-stuff-up
        :desc "Move line(s) down"      :nv "<M-down>"  #'drag-stuff-down
        :desc "Move line(s) left"      :nv "<M-left>"  #'drag-stuff-left
        :desc "Move line(s) right"     :nv "<M-right>" #'drag-stuff-right
        :desc "Go to prev visual line" :n  "<up>"      #'evil-previous-visual-line
        :desc "Go to next visual line" :n  "<down>"    #'evil-next-visual-line)

  ;; (map! :map org-mode-map
  ;;       :n "<M-h>" #'org-table-previous-field
  ;;       :n "<M-j>" #'org-table-next-row
  ;;       :n "<M-k>" #'org-table-previous-row
  ;;       :n "<M-l>" #'org-table-next-field)

  ;; ----- org-capture -----------------------------------------------------
  ;; (pushnew! org-capture-templates
  ;;           ;; '("j" "Journal"      entry (file+olp+datetree +org-capture-journal-file) "* %U %?\n%i\n%a"   :prepend t)
  ;;           '("w" "Work todo"    entry (file+headline "work.org"    "Inbox")         "* TODO %?\n%i\n%a" :prepend t)
  ;;           '("h" "Housing todo" entry (file+headline "housing.org" "Inbox")         "* TODO %?\n%i\n%a" :prepend t))

  ;; ----- headings --------------------------------------------------------
  (setq org-ellipsis " ▼ "
        org-log-into-drawer t
        org-log-done 'time
        org-hide-emphasis-markers t)

  ;; ----- fonts -----------------------------------------------------------
  ;; font sizes for each header level in Org mode.
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))

  ;; ----- org-special -----------------------------------------------------
  (setq org-src-window-setup 'other-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t)

  ;; ----- org-refile ------------------------------------------------------
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; ----- org-archive -----------------------------------------------------
  (setq org-archive-subtree-add-inherited-tags t)

  ;; ----- org-publish -----------------------------------------------------
  (setq org-publish-project-alist
        '(("github.io"
           :base-directory "~/projects/git/artemsmaznov.github.io/org"
           :base-extension "org"
           :publishing-directory "~/projects/git/artemsmaznov.github.io"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble t
           :exclude "header.org")))

  ;; ----- Search Engines --------------------------------------------------
  ;; e.g. [[arch-wiki:emacs][Emacs Page]]
  (setq org-link-abbrev-alist
        '(("arch-wiki" . "https://wiki.archlinux.org/title/")
          ("pacman"    . "https://archlinux.org/packages/?name=")
          ("aur"       . "https://aur.archlinux.org/packages/")
          ("github"    . "https://github.com/")
          ("google"    . "http://www.google.com/search?q=")
          ("brave"     . "https://search.brave.com/search?q=")
          ("wiki"      . "https://en.wikipedia.org/wiki/")
          ))

  ;; ----- org-clock -------------------------------------------------------
  (map! :mode org-mode
        :localleader
        :prefix "c"
        :n "p" #'org-clock-display)

  (setq org-clock-persist 'history
        org-clock-idle-time nil)

  (org-clock-persistence-insinuate)

  ;; ----- Org templates ---------------------------------------------------
  (require 'org-tempo)

  ;; extra languages for src blocks
  (pushnew! org-structure-template-alist
            '("el" . "src emacs-lisp")
            '("js" . "src javascript")
            '("lu" . "src lua")
            '("py" . "src python")
            '("sh" . "src shell")
            '("ya" . "src yaml"))

  ;; extra org structure templates
  (pushnew! org-src-lang-modes
            '("conf-unix" . conf-unix)
            '("toml"      . conf-toml)))
#+end_src

** Org Journal
#+begin_src emacs-lisp
(use-package! org-journal
  :after org
  :init
  (setq
   org-journal-dir (expand-file-name "writing/" org-directory))

  :config
  (setq
   org-journal-hide-entries-p nil
   org-journal-search-results-order-by :desc
   org-journal-enable-encryption nil
   org-journal-encrypt-journal nil))
#+end_src

** Roam
#+begin_src emacs-lisp
(use-package! org-roam
  :after org
  :config
  (setq org-roam-directory org-directory))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(use-package! org-agenda
  :after org
  :defer t
  :config
  (map! :map org-agenda-mode-map
        :m "D"   #'org-agenda-day-view
        :m "W"   #'org-agenda-week-view
        :m "M"   #'org-agenda-month-view ;; doesn't work
        :m "T"   #'org-agenda-fortnight-view
        :m "C-." #'org-agenda-goto-today
        :m "C-h" #'org-agenda-earlier
        :m "C-l" #'org-agenda-later)

  (setq org-agenda-start-with-log-mode t
        org-agenda-start-day nil
        org-agenda-span 'week
        org-agenda-start-on-weekday 1
        org-deadline-warning-days 14))
#+end_src

** Org Auto Tangle
Put at the header of the =Org= document to enable auto tangle on save for it
#+begin_example emacs-lisp
#+auto_tangle: t
#+end_example

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-babel-safelist
        '("README.org"
          "SHELLS.org"
          "local.org")))
#+end_src

** Ox
We need ox-man for "Org eXporting" to manpage format.
#+begin_src emacs-lisp
(after! org
  (use-package ox-man))
#+end_src

* Office Tools
** Calendar
#+begin_src emacs-lisp
(use-package! calendar
  :defer t
  :init
  (setq calendar-week-start-day 1
        calendar-date-style 'european))
#+end_src

CalFW
#+begin_src emacs-lisp
(use-package! calfw
  :defer t
  :init
  (map! :leader
        :prefix "o"
        :desc "Calendar" :e "c" #'cfw:open-org-calendar)

  :config
  (map! :map cfw:calendar-mode-map
        :m "C-j" #'cfw:navi-next-month-command
        :m "C-k" #'cfw:navi-previous-month-command
        :m "C-." #'cfw:navi-goto-today-command
        :m "0"   #'cfw:navi-goto-week-begin-command
        :m "gd"  #'cfw:org-goto-date
        :m "zd"  #'cfw:change-view-day
        :m "zw"  #'cfw:change-view-week
        :m "zm"  #'cfw:change-view-month
        :m "zt"  #'cfw:change-view-two-weeks
        :m "T"   #'cfw:change-view-two-weeks)) ;; not active due to evil-snipe and evil-find-char
#+end_src

iCalendar
#+begin_src emacs-lisp
(use-package! icalendar
  :defer t
  :config
  (setq
   org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
   org-icalendar-use-deadline '(event-if-todo-not-done)))
#+end_src

CalDAV sync
#+begin_src emacs-lisp
(use-package! org-caldav
  :after calfw
  :init
  (map! :leader
        :prefix "n"
        :desc "Sync with server" :e "C-s" #'org-caldav-sync)

  :config
  (setq
   org-caldav-url (concat "https://" my/nextcloud/url "/remote.php/dav/calendars/" my/username)
   org-caldav-delete-calendar-entries 'always
   org-caldav-delete-org-entries 'ask
   org-caldav-show-sync-results nil
   org-caldav-save-directory (expand-file-name ".caldav/" org-directory)
   org-caldav-backup-file (expand-file-name "backup.org" org-caldav-save-directory)
   org-caldav-location-newline-replacement ","
   org-caldav-exclude-tags '("nocal")
   org-caldav-calendars `((:calendar-id "personal" :select-tags ("calgnr")
                           :inbox ,(expand-file-name "todo.org" org-directory)
                           :files (,(expand-file-name "todo.org" org-directory)
                                   ,(expand-file-name "archive.org" org-directory)))

                          (:calendar-id "housing" :select-tags ("calhsn")
                           :inbox ,(expand-file-name "todo.org" org-directory)
                           :files (,(expand-file-name "todo.org" org-directory)
                                   ,(expand-file-name "archive.org" org-directory)))

                          (:calendar-id "work" :select-tags ("calwrk")
                           :inbox ,(expand-file-name "todo.org" org-directory)
                           :files (,(expand-file-name "todo.org" org-directory)
                                   ,(expand-file-name "archive.org" org-directory))))))
#+end_src

** Email
#+begin_src emacs-lisp
(setq rmail-spool-directory "/var/spool/mail/")
#+end_src

*** AuthInfo
Setting up =~/.authinfo.gpg= with credentials
#+begin_example authinfo
machine smtp.gmail.com login example@gmail.com password eXaMpLePaSsWoRd port 465
#+end_example

*** mu4e
+ Arch Linux: ~$ pacman -S isync~
              ~$ paru -S mu~

A custom variable containing an email address string needs to be defined for each context
#+begin_example elisp
(defvar my/email/main "example@mail.com" "My primary email address")
#+end_example

#+begin_src emacs-lisp
(use-package! mu4e
  :defer t
  :commands (mu4e make-mu4e-context)
  :init
  (setq
   doom-modeline-mu4e t
   +mu4e-lock-file "/tmp/mu4e-lock")

  ;; start mu4e in the background so it auto-syncs emails
  (if (and (executable-find "mu")
           (not (file-exists-p +mu4e-lock-file)))
      (mu4e t))

  :config
  (map! :map mu4e-view-mode-map
        :n "m" #'mu4e-view-mark-for-something
        :n "M" #'mu4e-view-mark-for-move
        :n "t" #'mu4e-view-mark-subthread
        :n "T" #'mu4e-view-mark-thread

        :map mu4e-headers-mode-map
        :n "m" #'mu4e-headers-mark-for-something
        :n "M" #'mu4e-headers-mark-for-move
        :n "t" #'mu4e-headers-mark-subthread
        :n "T" #'mu4e-headers-mark-thread)

  (setq
   mu4e-update-interval (* 5 60) ;; auto-sync interval in seconds
   mu4e-confirm-quit t

   ;; headers - view listing the emails
   mu4e-split-view 'vertical
   mu4e-headers-visible-columns 80
   mu4e-headers-time-format "%l:%M:%S %p"
   mu4e-headers-date-format "%e %b %Y"
   mu4e-headers-long-date-format "%a, %e %B %Y, %l:%M:%S %p"

   ;; message
   ;; mu4e-view-date-format "%c"
   ;; mu4e-date-format-long "%c"
   message-kill-buffer-on-exit t ;; don't keep message buffers

   ;; composing
   mu4e-compose-format-flowed t ;; use html formatting for outgoing emails
   mu4e-compose-dont-reply-to-self t

   mu4e-get-mail-command "true"

   ;; colum layout for mail list
   mu4e-headers-fields
   '((:account-stripe . 1)
     (:flags          . 7)
     (:human-date     . 12)
     (:from-or-to     . 25)
     (:thread-subject . nil)))

  (setq
   ;; NOTE needs to be redefined when mu4e autostarts in the background with no
   ;; context selected. this causes emacs to ask to create the default
   ;; directories in the root of maildir
   mu4e-drafts-folder "/artem/drafts"
   mu4e-sent-folder "/artem/sent"
   mu4e-refile-folder "/artem/archive"
   mu4e-trash-folder "/artem/trash"

   ;; NOTE not required, but gives an additional visual and functional indicator
   ;; that no context is selected
   mu4e-maildir-shortcuts
   '(("/inbox"   . ?i)
     ("/drafts"  . ?d)
     ("/sent"    . ?s)
     ("/archive" . ?a)
     ("/trash"   . ?t))

   ;; DEPRECATED have not see the effect of this yet
   +mu4e-header--maildir-colors
   '(("/artem/sent"   . all-the-icons-dgreen)
     ("/artem/drafts" . all-the-icons-yellow)
     ("/artem/trash"  . all-the-icons-red)))

  ;; contexts
  (setq
   mu4e-context-policy 'pick-first
   mu4e-compose-context-policy 'ask-if-none
   ;; mu4e-index-cleanup nil ;; don't need to run cleanup after indexing for gmail
   ;; mu4e-index-lazy-check t ;; because gmail uses labels as folders we can use lazy check since messages don't really "move"
   mu4e-contexts
   `(,(make-mu4e-context
       :name "local"
       :match-func
       (lambda (msg)
         (when msg
           (string-prefix-p "/artem" (mu4e-message-field msg :maildir))))

       :vars
       `((user-mail-address  . "artem@izumi")
         (mu4e-drafts-folder . "/artem/drafts")
         (mu4e-sent-folder   . "/artem/sent")
         (mu4e-refile-folder . "/artem/archive")
         (mu4e-trash-folder  . "/artem/trash")

         (mu4e-maildir-shortcuts
          . (("/artem/inbox"   . ?i)
             ("/artem/drafts"  . ?d)
             ("/artem/sent"    . ?s)
             ("/artem/archive" . ?a)
             ("/artem/trash"   . ?t)))))

     ,(make-mu4e-context
       :name "amadeus"
       :match-func
       (lambda (msg)
         (when msg
           (string-prefix-p "/amadeus" (mu4e-message-field msg :maildir))))

       :vars
       `((user-mail-address  . "artem@amadeus")
         (mu4e-drafts-folder . "/amadeus/drafts")
         (mu4e-sent-folder   . "/amadeus/sent")
         (mu4e-refile-folder . "/amadeus/archive")
         (mu4e-trash-folder  . "/amadeus/trash")

         (mu4e-maildir-shortcuts
          . (("/amadeus/inbox"   . ?i)
             ("/amadeus/drafts"  . ?d)
             ("/amadeus/sent"    . ?s)
             ("/amadeus/archive" . ?a)
             ("/amadeus/trash"   . ?t)))))

     ,(make-mu4e-context
       :name "ichigo"
       :match-func
       (lambda (msg)
         (when msg
           (string-prefix-p "/ichigo" (mu4e-message-field msg :maildir))))

       :vars
       `((user-mail-address  . "artem@ichigo")

         (mu4e-drafts-folder . "/ichigo/drafts")
         (mu4e-sent-folder   . "/ichigo/sent")
         (mu4e-refile-folder . "/ichigo/archive")
         (mu4e-trash-folder  . "/ichigo/trash")

         (mu4e-maildir-shortcuts
          . (("/ichigo/inbox"   . ?i)
             ("/ichigo/drafts"  . ?d)
             ("/ichigo/sent"    . ?s)
             ("/ichigo/archive" . ?a)
             ("/ichigo/trash"   . ?t)))))))

  (setq mu4e-bookmarks
        '((:name "Unread messages"
           :query "flag:unread AND NOT flag:trashed"
           :key ?u)
          (:name "Today's messages"
           :query "date:today..now"
           :key ?t)
          (:name "Last 7 days"
           :query "date:7d..now"
           :hide-unread t
           :key ?w)
          (:name "Messages with images"
           :query "mime:image/*"
           :key ?p)
          (:name "All inboxes"
           :query "m:/artem/inbox OR m:/amadeus/inbox OR m:/ichigo/inbox"
           :key ?i)
          (:name "Full archive"
           :query "m:/artem/archive OR m:/amadeus/archive OR m:/ichigo/archive"
           :key ?a)))

  ;; modeline
  (setq
   ;; mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND NOT maildir:\"/[Gmail]/All Mail\""
   mu4e-display-update-status-in-modeline t))
#+end_src

#+begin_src emacs-lisp
;; (use-package! mu4e
;;   :defer t
;;   :init
;;   (setq
;;    doom-modeline-mu4e t)
;;   :config
;;   (map! :map mu4e-view-mode-map
;;         :n "m" #'mu4e-view-mark-for-something
;;         :n "M" #'mu4e-view-mark-for-move
;;         :n "t" #'mu4e-view-mark-subthread
;;         :n "T" #'mu4e-view-mark-thread

;;         :map mu4e-headers-mode-map
;;         :n "m" #'mu4e-headers-mark-for-something
;;         :n "M" #'mu4e-headers-mark-for-move
;;         :n "t" #'mu4e-headers-mark-subthread
;;         :n "T" #'mu4e-headers-mark-thread)

;;   (setq
;;    mu4e-get-mail-command (concat "mbsync -a -c " (xdg-config-home) "/isync/mbsyncrc" )
;;    mu4e-update-interval (* 15 60) ;; auto-sync interval in seconds
;;    mu4e-maildir-shortcuts
;;    '(("/Inbox"             . ?i)
;;      ("/Work"              . ?w)
;;      ("/[Gmail]/Important" . ?I)
;;      ("/[Gmail]/Sent Mail" . ?s)
;;      ("/[Gmail]/Drafts"    . ?d)
;;      ("/[Gmail]/All Mail"  . ?a)
;;      ("/[Gmail]/Trash"     . ?t))
;;    +mu4e-header--maildir-colors
;;    '(("/Inbox"      . all-the-icons-yellow)
;;      ("/Work"       . all-the-icons-red)
;;      ("[Gmail]"     . all-the-icons-dgreen)))

;;   ;; headers - view listing the emails
;;   (setq
;;    mu4e-split-view 'vertical
;;    mu4e-headers-visible-columns 170
;;    mu4e-headers-time-format "%l:%M:%S %p"
;;    mu4e-headers-date-format "%e %b %Y"
;;    mu4e-headers-long-date-format "%a, %e %B %Y, %l:%M:%S %p"
;;    ;; colum layout for mail list
;;    mu4e-headers-fields
;;    '((:account-stripe . 1)
;;      (:flags          . 7)
;;      (:human-date     . 12)
;;      (:from-or-to     . 25)
;;      (:thread-subject . nil)))

;;   ;; message
;;   (setq
;;    ;; mu4e-view-date-format "%c"
;;    ;; mu4e-date-format-long "%c"
;;    message-kill-buffer-on-exit t) ;; don't keep message buffers

;;   ;; composing
;;   (setq
;;    mu4e-compose-format-flowed t ;; use html formatting for outgoing emails
;;    mu4e-compose-dont-reply-to-self t)

;;   ;; contexts
;;   (setq
;;    mu4e-context-policy 'pick-first
;;    mu4e-compose-context-policy 'ask-if-none
;;    ;; mu4e-index-cleanup nil ;; don't need to run cleanup after indexing for gmail
;;    ;; mu4e-index-lazy-check t ;; because gmail uses labels as folders we can use lazy check since messages don't really "move"
;;    mu4e-contexts
;;    `(
;;      ;; ,(make-mu4e-context
;;      ;;   :name "Artem"
;;      ;;   :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to my/email/artem)))
;;      ;;   :vars `((smtpmail-smtp-server  . "smtp.gmail.com")
;;      ;;           (smtpmail-smtp-service . 465)
;;      ;;           (smtpmail-stream-type  . ssl)
;;      ;;           (user-mail-address     . ,my/email/artem)
;;      ;;           (mu4e-drafts-folder    . "/[Gmail]/Drafts")
;;      ;;           (mu4e-sent-folder      . "/[Gmail]/Sent Mail")
;;      ;;           (mu4e-refile-folder    . "/[Gmail]/All Mail")
;;      ;;           (mu4e-trash-folder     . "/[Gmail]/Trash")))
;;      ,(make-mu4e-context
;;        :name "Main"
;;        :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to my/email/main)))
;;        ;; :match-func (lambda (msg) (when msg (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
;;        :vars `((user-mail-address  . ,my/email/main)
;;                (mu4e-drafts-folder . "/[Gmail]/Drafts")
;;                (mu4e-sent-folder   . "/[Gmail]/Sent Mail")
;;                (mu4e-refile-folder . "/[Gmail]/All Mail")
;;                (mu4e-trash-folder  . "/[Gmail]/Trash")))))

;;      ;; start mu4e in the background so it auto-syncs emails
;;      (mu4e t)

;;      ;; modeline
;;      (setq
;;       mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND NOT maildir:\"/[Gmail]/All Mail\""
;;       mu4e-display-update-status-in-modeline t))
#+end_src

*** Authentication
Function used by =mbsync= for authentication with the email server
#+begin_src emacs-lisp
(defun my/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
        nil)))
#+end_src

** Ledger
#+begin_src emacs-lisp
(use-package! ledger-mode
  :defer t
  :config
  (map! :map ledger-mode-map
        :localleader
        :e "c" #'ledger-mode-clean-buffer)

  (setq ledger-default-date-format "%Y-%m-%d"))
#+end_src

** Presentations
#+begin_src emacs-lisp
(use-package! org-tree-slide
  :after org
  :defer t
  :init
  (map! :map org-mode-map
        :leader
        :prefix "t"
        :desc "Presentation" :e "p" #'org-tree-slide-mode)

  :hook ((org-tree-slide-play . my/presentation-start)
         (org-tree-slide-stop . my/presentation-end))

  :config
  (map! :map org-tree-slide-mode-map
        "C-h"   #'org-tree-slide-move-previous-tree
        "C-l"   #'org-tree-slide-move-next-tree
        "C-SPC" #'org-tree-slide-content)

  (setq
   org-tree-slide-activate-message "Presentation started!"
   org-tree-slide-deactivate-message "Presentation finished!"
   org-tree-slide-slide-in-effect t
   org-tree-slide-header t
   org-tree-slide-breadcrumbs " > "
   org-image-actual-width nil))
#+end_src

#+begin_src emacs-lisp
(defun my/presentation-start ()
  (writeroom-mode 1)
  (display-line-numbers-mode 0)
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images
  )

(defun my/presentation-end ()
  (writeroom-mode 0)
  (display-line-numbers-mode 1)
  )
#+end_src

* Development Tools
** Git
*** Magit
#+begin_src emacs-lisp
(use-package! magit
  :defer t
  :init
  (defun my/magit-yank-current-branch-name ()
    "Show the current branch in the echo-area and add it to the `kill-ring'."
    (interactive)
    (let ((branch (magit-get-current-branch)))
      (if branch
          (progn (kill-new branch)
                 (message "%s" branch))
        (user-error "There is no current branch"))))

  :config
  (setq
   magit-repository-directories `((,(xdg-config-home) . 1)
                                  ("~/.local/bin" . 0)
                                  ("~/projects" . 5))

   git-commit-summary-max-length 68

   magit-revision-show-gravatars t ;; enable gravatars
   ;; magit-display-buffer-function 'magit-display-buffer-traditional ;; open magit in a side window

   ;; enable granular diff-highlights for all hunks
   ;; change to t if performance is bad
   magit-diff-refine-hunk 'all
   magit-repolist-column-flag-alist ' ((magit-untracked-files . "?")
                                       (magit-unstaged-files . "!")
                                       (magit-staged-files . "+"))

   magit-repolist-columns ' (("" 10 magit-repolist-column-branch ((:right-align t)))
                             ("B<U" 3 magit-repolist-column-unpulled-from-upstream ((:right-align t) (:sort <)))
                             ("B>U" 3 magit-repolist-column-unpushed-to-upstream ((:right-align t) (:sort <)))
                             ("F" 3 magit-repolist-column-flags nil)
                             ("Name" 25 magit-repolist-column-ident nil)
                             ("Version" 25 magit-repolist-column-version ((:sort magit-repolist-version<)))
                             ("Path" 99 magit-repolist-column-path nil))

   magit-submodule-list-columns ' (("Path" 40 magit-modulelist-column-path nil)
                                   ("Version" 25 magit-repolist-column-version
                                    ((:sort magit-repolist-version<)))
                                   ("Branch" 20 magit-repolist-column-branch nil)
                                   ("B<U" 3 magit-repolist-column-unpulled-from-upstream
                                    ((:right-align t)
                                     (:sort <)))
                                   ("B>U" 3 magit-repolist-column-unpushed-to-upstream
                                    ((:right-align t)
                                     (:sort <)))
                                   ("B<P" 3 magit-repolist-column-unpulled-from-pushremote
                                    ((:right-align t)
                                     (:sort <)))
                                   ("B>P" 3 magit-repolist-column-unpushed-to-pushremote
                                    ((:right-align t)
                                     (:sort <)))
                                   ("B" 3 magit-repolist-column-branches
                                    ((:right-align t)
                                     (:sort <)))
                                   ("S" 3 magit-repolist-column-stashes
                                    ((:right-align t)
                                     (:sort <))))))
#+end_src

*** Forge
#+begin_src emacs-lisp
(use-package! forge
  :after magit
  :defer t

  :init
  (if (featurep :system 'macos)
      (setq doom-modeline-github nil)
      (setq doom-modeline-github t))

  :config
  (setq
   forge-pull-notifications nil
   forge-repository-list-columns '(("Owner" 20 t nil owner nil)
                                   ("N" 1 t nil sparse-p nil)
                                   ("S" 1 t nil selective-p nil)
                                   ("Name" 50 t nil name nil)
                                   ("Worktree" 99 t nil worktree nil))))
#+end_src

*** Code Review
#+begin_src emacs-lisp
(use-package! code-review
  :after magit
  :defer t
  :config
  (map! :map magit-mode-map
        "R" #'code-review-forge-pr-at-point

        :map forge-topic-mode-map
        "R" #'code-review-forge-pr-at-point))
#+end_src

*** Todos
#+begin_src emacs-lisp
(use-package! magit-todos
  :after magit
  :defer t
  :hook
  (magit-mode . magit-todos-mode)
  :config
  (pushnew! magit-todos-exclude-globs
            "Basemark*/"
            "Brave*/"
            "Code*/"
            "Cypress/"
            "GIMP/"
            "KDE/"
            "Nextcloud/"
            "chromium/"
            "coc/"
            "discord/"
            "glib*/"
            "google*/"
            "google-chrome/"
            "kde*/"
            "torbrowser*/"
            "unity*/"
            "vivaldi*/"
            "{emacs,doom}/"))
#+end_src

** Ansible
#+begin_src emacs-lisp
(use-package! ansible
  :defer t
  :hook
  (yaml-mode . (lambda ()
                 (if (not buffer-file-name)
                     (message "buffer-file-name is not set")
                   (if (s-contains? "ansible" (file-name-directory buffer-file-name) t)
                       (ansible-mode 1))))))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package! projectile
  :defer t
  :init
  (setq projectile-switch-project-action #'projectile-dired)
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  :config
  (map! :leader
        :prefix "p"
        :desc "Run project"        :e "A" #'projectile-run-project
        :desc "Project substitute" :e "R" #'projectile-replace-regexp))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package! lsp-treemacs
  :defer t
  :commands lsp-treemacs-errors-list)
#+end_src

** Completion
#+begin_src emacs-lisp
(use-package! company
  :defer t
  :config
  (map! :after lsp-mode
        :map lsp-mode-map
        :i "<tab>" #'company-indent-or-complete-common)

  (setq
   company-idle-delay 0.5
   company-tooltip-idle-delay 2
   company-minimum-prefix-length 1))
#+end_src

** Ivy
#+begin_src emacs-lisp
(use-package! lsp-ivy
  :defer t
  :commands lsp-ivy-workspace-symbol)
#+end_src

** Rotate Text
To enable a set of items to cycle through globally, add the following to your configuration
#+begin_src emacs-lisp
(use-package! rotate-text
  :defer t
  :config
  (pushnew! rotate-text-words
            '("yes" "no")
            '("on" "off")
            '("start" "end")))
#+end_src

** Indent Guides
#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :defer t
  :config
  (setq highlight-indent-guides-method 'fill))
#+end_src

** Rainbow Mode
Highlight colors in file
#+begin_src emacs-lisp
(use-package! rainbow-mode
  :defer t
  :init
  (map! :leader
        :prefix "t"
        :desc "Colors" :e "c" #'rainbow-mode))
#+end_src

* LSP
** LSP Mode
#+begin_src emacs-lisp
(use-package! lsp-mode
  :defer t
  :commands (lsp lsp-deferred)
  :hook
  (rjsx-mode    . lsp-deferred)
  (python-mode  . lsp-deferred)
  (feature-mode . lsp-deferred)
  (vimrc-mode   . lsp-deferred)
  (groovy-mode  . lsp-deferred))
#+end_src

See [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][this]] for LSP UI elements and their respective variables
#+begin_src emacs-lisp
(use-package! lsp-ui
  :defer t
  :commands lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode)

  :config
  (setq
   ;; 1. Symbol highlighting
   lsp-enable-symbol-highlighting t

   ;; 2. `lsp-ui-doc` hover dialogs
   lsp-ui-doc-enable nil
   lsp-ui-doc-delay 0.75
   lsp-ui-doc-show-with-cursor t
   lsp-ui-doc-show-with-mouse nil

   lsp-ui-doc-position 'top
   lsp-ui-doc-alignment 'window
   lsp-ui-doc-header t
   lsp-ui-doc-border "gray"

   ;; 3. Lenses
   lsp-lens-enable t

   ;; 4. Headerline
   lsp-headerline-breadcrumb-enable t

   ;; 5. Sideline code actions
   lsp-ui-sideline-enable t
   lsp-ui-sideline-show-code-actions t

   ;; 6. Sideline hover symbols
   lsp-ui-sideline-show-hover nil

   ;; 7. Modeline code actions
   lsp-modeline-code-actions-enable t

   ;; 8. Flycheck / flymake
   ;; lsp-diagnostics-provider :auto

   ;; 9. Sideline diagnostics
   lsp-ui-sideline-show-diagnostics t

   ;; 10. Eldoc
   lsp-eldoc-enable-hover t

   ;; 11. Modeline diagnostics statistics
   lsp-modeline-diagnostics-enable t

   ;; 12. Signarure help
   ;; lsp-signature-auto-activate '(:on-trigger-char :on-server-request)

   ;; 13.
   lsp-signature-render-documentation t

   ;; 14. Completion
   ;; lsp-completion-provider :capf

   ;; 15. Completion item detail
   lsp-completion-show-detail t

   ;; 16. Completion item kind
   lsp-completion-show-kind t))
#+end_src

** Conf
#+begin_src emacs-lisp
(use-package! conf-mode
  :defer t
  :mode
  "\\.automount\\'"
  "\\.mount\\'"
  "\\.path\\'"
  "\\.service\\'"
  "\\.slice\\'"
  "\\.socket\\'"
  "\\.target\\'"
  "\\.timer\\'"
  )
#+end_src

** Crontab
#+begin_src emacs-lisp
(use-package! crontab-mode
  :defer t
  :mode
  "/cron\\(.d\\)?")
#+end_src

** Cucumber
#+begin_src emacs-lisp
(use-package! feature-mode
  :defer t
  :mode
  "\\.feature\\'"

  :config
  (setq
   feature-default-language "en"
   ;; feature-step-search-path "features/../**/*step*/*.js"
   ))
#+end_src

** Groovy
#+begin_src emacs-lisp
(use-package! groovy-mode
  :defer t
  :mode
  "/Jenkinsfile.*\\'"
  "\\.pipe\\'"
  "\\.PIPE\\'"

  :hook
  (groovy-mode . (lambda () (rainbow-delimiters-mode 1)))

  :config
  (setq groovy-indent-offset 2))
#+end_src

** JavaScript
#+begin_src emacs-lisp
;; (use-package! rjsx-mode
;;   :ensure t
;;   :mode
;;   "\\.js\\'"
;; )
#+end_src

** Jinja
#+begin_src emacs-lisp
(use-package! jinja2-mode
  :defer t
  :hook
  (jinja2-mode . (lambda ()
                   (spell-fu-mode -1))))
#+end_src

** Json
#+begin_src emacs-lisp
(use-package! jsonc-mode
  :defer t
  :mode
  "\\.jsonc\\'"
)
#+end_src

** Logs
#+begin_src emacs-lisp
(use-package! syslog-mode
  :defer t
  :mode
  "\\.log"
  "\\.[0-9]+\\'"

  :hook
  (syslog-mode . (lambda ()
                   (make-local-variable 'display-line-numbers-type)
                   (setq display-line-numbers-type t)
                   (display-line-numbers-mode 1))))
#+end_src

** Python
+ macOS: ~$ brew install pyright~
+ Arch Linux: ~$ pacman -S pyright~
** Rust
#+begin_src emacs-lisp
(use-package! rustic
  :defer t
  :config
  (map! :map rustic-mode-map
        :localleader
        :prefix "t"
        :desc "with doc-tests" :n "d" #'rustic-cargo-test-run))
#+end_src

** Vim
Enable syntax highlighting for .vim files
#+begin_src emacs-lisp
(use-package! vimrc-mode
  :defer t
  :mode
  "\\.vim\\(rc\\)?\\'"
  "\\.vifm\\'"

  :config
  (setq evil-shift-width 2))
#+end_src

** Yaml
#+begin_src emacs-lisp
(use-package! yaml-mode
  :defer t
  :hook
  (yaml-mode . (lambda ()
                   (spell-fu-mode -1))))
#+end_src

* AI
** KILL Copilot
accept completion from copilot and fallback to company

#+begin_src emacs-lisp :tangle no
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

* RSS
** Elfeed
#+begin_src emacs-lisp
(use-package! elfeed
  :defer t
  :init
  (map! :leader
        :prefix "o"
        :desc "RSS News" :e "n" #'elfeed)

  :config
  (map! :mode elfeed-search-mode
        :desc "Remove Selected" :n "D" #'my/elfeed-search-remove-selected

        :mode (elfeed-search-mode elfeed-show-mode)
        :localleader
        :desc "Show starred" :n "s" #'my/elfeed-show-starred
        :desc "Toggle logs"  :n "l" #'elfeed-goodies/toggle-logs
        :desc "Update"       :n "u" #'elfeed-update)

  (elfeed-set-timeout 36000)
  (setq
   elfeed-log-level 'info
   elfeed-goodies/log-window-position 'bottom
   elfeed-goodies/wide-threshold 0.3
   elfeed-goodies/show-mode-padding 1
   elfeed-goodies/entry-pane-size 0.5
   elfeed-goodies/feed-source-column-width 20
   elfeed-use-curl t
   elfeed-search-date-format '("%d-%m-%Y" 10 :left)
   elfeed-search-filter "@1-month-ago +unread")

  (defun my/elfeed-show-starred ()
    "Show all starred feeds"
    (interactive)
    (elfeed-search-set-filter "+star"))

  (defun my/elfeed-db-remove-entry (id)
    "Removes elfeed entry for given ID"
    (avl-tree-delete elfeed-db-index id)
    (remhash id elfeed-db-entries))

  (defun my/elfeed-search-remove-selected ()
    "Remove selected entries from elfeed database"
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (count (length entries)))
      (when (y-or-n-p (format "Delete %d entires?" count))
        (cl-loop for entry in entries
                 do (my/elfeed-db-remove-entry (elfeed-entry-id entry)))))
    (elfeed-search-update--force)))
#+end_src

** Elfeed Org
#+begin_src emacs-lisp
(use-package! elfeed-org
  :after elfeed
  :config
  (setq
   rmh-elfeed-org-files (list (expand-file-name "rss.org" org-directory))
   rmh-elfeed-org-tree-id "elfeed"
   rmh-elfeed-org-ignore-tag "ignore"))
#+end_src

** Elfeed Protocol
#+begin_src emacs-lisp
(use-package! elfeed-protocol
  :after elfeed elfeed-org
  :config
  (defun my/elfeed-protocol-configure (&rest args)
    "Make elfeed-org autotags rules works with elfeed-protocol."
    (setq elfeed-protocol-feeds
          (list (list (concat "owncloud+https://" my/username "@" my/nextcloud/url)
                      :use-authinfo t
                      :autotags  elfeed-feeds)))
    (elfeed-update))

  (advice-add 'elfeed :after #'my/elfeed-protocol-configure)

  (setq
   elfeed-protocol-enabled-protocols '(owncloud)
   elfeed-protocol-owncloud-fetch-category-as-tag nil
   elfeed-protocol-owncloud-update-with-modified-time t
   elfeed-protocol-owncloud-star-tag 'star)
  (elfeed-protocol-enable))
#+end_src

* Spell Checking
+ macOS: ~$ brew install aspell~
+ Arch Linux: ~$ pacman -S aspell aspell-en aspell-ru~

#+begin_src emacs-lisp
(use-package! spell-fu
  :defer t
  :hook
  (spell-fu-mode
   . (lambda ()
       ;; extra languages
       (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "ru"))
       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "ru"
                                 (expand-file-name
                                  "dict/ru.pws" (xdg-data-home))))

       ;; extra personal dictionaries
       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "people"
                                 (expand-file-name
                                  "dict/en.people.pws" (xdg-data-home))))

       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "places"
                                 (expand-file-name
                                  "dict/en.places.pws" (xdg-data-home))))

       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "brands"
                                 (expand-file-name
                                  "dict/en.brands.pws" (xdg-data-home))))

       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "finance"
                                 (expand-file-name
                                  "dict/en.finance.pws" (xdg-data-home))))

       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "dev"
                                 (expand-file-name
                                  "dict/en.dev.pws" (xdg-data-home))))

       (spell-fu-dictionary-add (spell-fu-get-personal-dictionary
                                 "work"
                                 (expand-file-name
                                  "dict/en.work.pws" (xdg-data-home))))))

  :config
  (setq
   spell-fu-word-delimit-camel-case t
   spell-fu-idle-delay 0.25
   ispell-personal-dictionary (expand-file-name
                               "dict/en.pws" (xdg-data-home))))
#+end_src

* Global Keybindings
#+begin_src emacs-lisp
(map! :leader
      ;; buffer/bookmark
      :prefix "b"
      :desc "List bookmarks"                          :e "L" #'list-bookmarks
      :desc "Save current bookmarks to bookmark file" :e "w" #'bookmark-save
      ;; :desc "Clone indirect buffer other window" "c" #'clone-indirect-buffer-other-window

      ;; insert
      :prefix "i"
      :desc "Toilet pagga" :e "t" (cmd! (evil-ex "R!toilet -f pagga "))

      ;; <localleader>
      :prefix "m"
      :desc "Justify text"    :e "j" #'set-justification

      ;; toggle
      :prefix "t"
      :desc "Toggle auto fill mode" :e "a" #'auto-fill-mode
      :desc "Toggle scroll bars"    :e "S" #'scroll-bar-mode
      :desc "Fill column indicator" :e "|" #'global-display-fill-column-indicator-mode

      ;; workspace
      :prefix "TAB"
      :desc "Move workspace left"  :e "<" #'+workspace/swap-left
      :desc "Move workspace right" :e ">" #'+workspace/swap-right)
#+end_src

* Local Overwrite
Load custom configuration overwrites from and external file
#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "local.el" doom-private-dir))
  (load! (expand-file-name "local.el" doom-private-dir))
  )
#+end_src

* Additional Notes
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

#+begin_example emacs-lisp
(after! PACKAGE
    (setq x y))
#+end_example

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
this file. Emacs searches the `load-path' when you load packages with
`require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
